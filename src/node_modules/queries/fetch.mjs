import { promises as fs } from 'fs'

import fetch from 'node-fetch';

import { sparqlEndpoints } from '../config.mjs'

export const querySparqlFromFile = async (endpoint, path, options = {}) => {
	const query = await fs.readFile(path);
	const queryResult = await querySparql(endpoint, query, { ...options, quiet: true });
	if (!options.quiet) {
		
		if (queryResult.isSuccessful) {
			console.log(`[+] Fetched results for ${path}`);
		}
		else {
			console.log(`[-] Failed to fetch query for ${path}`)
		}
	}
	return {
		...queryResult,
		path: path
	}
}

export const querySparql = async (endpoint, query, options = {}) => {
	if (endpoint in sparqlEndpoints) endpoint = sparqlEndpoints[endpoint];

	let url = new URL(endpoint);
	for (const [key, value] of Object.entries(options)) {
		url.searchParams.append(key, value);
	}

	const bytes = Buffer.byteLength(query, 'utf-8');
	let res;

	// SPARQL spec specifies that queries longer than 1900 bytes need to use POST

	if (bytes < 1900) {
		url.searchParams.append('query', query);
		res = await fetch(url);
	} else {
		res = await fetch(endpoint, {
			method: 'post',
			body: query,
			headers: { 'Content-Type': 'application/sparql-query' },
		});
	}

	if (res.ok) {
		const result = await res.text();
		if (!options.quiet) {
			console.log('[+] Succesully fetched query');
		}
		return {
			isSuccessful: true,
			query,
			result,
		}
	} else {
		if (!options.quiet) {
			console.error('[-] Failed to fetch query');
		}
		return {
			isSuccessful: false,
			query
		}
	}
};